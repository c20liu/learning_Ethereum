
http://solidity-cn.readthedocs.io/zh/develop/contracts.html#low-level-interface-to-logs

Solidity有两种function call,其中internal one不会创建真实的EVM，也称为message call，external one会的
1.可见度：
  函数：external public internal private, 默认是public
  状态变量：没有external,默认是internal
    external:是合约的接口，只能被外部合约调用，不能被自己内部调用（f()这样是不生效的，但是可以this.f()）
    public:也是合约接口，可以被内部或者消息调用，对于public的状态变量，会默认生成同名的get函数
    internal:函数和状态变量都只能被内部访问（合约本身或者合约派生的合约）
    private:函数和状态变量只能被定义的合约访问（派生的也访问不了
  【注意】这里的可见度，只是对合约这个主体来说的，但是对所有的外部观察者（人）,是可以见到所有的定义的，因为合约代码是公开的。

2.修饰符
  modifier
  是可继承的，可以被继承合约重写
  多个修饰符修饰一个函数，中间用空格
 
3 constant
  静态状态变量，在编译阶段赋值
  
4 函数：
  view:一般只是简单的返回某个值（包括状态变量）
  如果函数不希望被修改状态，可以声明为view
    修改函数状态指的是：
      1. 写状态变量
      2. 发出事件
      3. 创建其他合约
      4. 调用selfdestruct
      5. 通过calls发送ether
      6. 调用其他没有修改为view或者pure的函数
      7. 使用低level的calls
      8. 使用内部汇编，并包含了某些操作码
   constant同view
   Getter方法被标记为view
   【注意】编译器不能强迫vew方法不去修改状态，即编译器无法检查view方法是否是真的view(没有修改状态)
   
  pure：一般只是简单的返回某个值，这个返回连状态变量都不涉及
  如果函数不希望被读取或者修改状态，可以声明为pure
  除了上面说的那些列明的状态外，下面的被认为读取状态：
      1. 读取状态变量
      2. 读取this.balance 或者 address.balance
      3. 读取任何的block tx msg的成员，（msg.sig和msg.data除外）
      4. 调用任何没有被声明为pure的方法
      5. 使用内部汇编，并包含了某些操作码
   【注意】编译器也不能检查pure函数是否读取了状态 
   
5. Fallback Function
    合约可以有一个（exactly one）没有方法名的函数（function()）,函数没有参数，也没有返回值
    当调用1个合约中不存在的函数时，就会被调用
    被payable修饰后，可以接受单纯的ether(plain ether(without data))
    在这样上下文中，这类回退函数能够消耗的gas非常少， 2300gas, 所有要保证fallback function as cheap as possible.
    确保你完成的测试了你的fallback function，确保执行消耗小鱼2300 gas
    
    虽然fallback不能有参数，但是还是可以使用msg.data来获取为这个函数提供的任何的payload
    
   【注意】一个合约如果直接受到ether，例如用send or transfer，但是这个合约没有定义fallback function，将会throw an exception,并sending back
   the ether,如果你的合约想要收到ether, 要实现一个fallback function
   【注意】一个没有payable的fallback function的合约可以作为coinbase交易的接收者可以接收Ether，也可以作为selfdestruct的目的地接收Ether
   
 6. Function Overloading
    合约可以有多个函数名相同，参数不同的函数
     It is an error if two externally visible functions differ by their Solidity types but not by their external types
     // This will not compile
      pragma solidity ^0.4.16;

      contract A {
          function f(B _in) public pure returns (B out) {
              out = _in;
          }

          function f(address _in) public pure returns (address out) {
              out = _in;
          }
      }

      contract B {
      }
      因为最终转成ABI后，入参都是address，虽然对于solidity来说是不同的
      返回值不被当做重写标准
      
      overload函数实现选择机制：匹配函数描述符及参数范围，如果匹配后，不存在唯一的候选者，在失败
      
 7 事件 Event
    事件可以方便的使用EVM的log 系统，dapp可以通过javascript callback函数调用这些事件
    事件是合约中可继承成员，当它被调用，会使得参数保存到交易log中，这是区块链中一种特殊的数据结构，这些log关联到合约地址，被合并到区块链，并且只要
    合约可以访问，它就存在（在Frontier和Homestead中是这样，在Serenity可能会改变），合约内部不能访问它的日志和事件数据
    
    最多可以有3个参数被加上indexed属性，这样讲分别建立三个查询索引，是的用户接口可以根据不同的属性过滤log
    
    如果数组包括（string和bytes）被当做了indexed，则存储Keccak-256 hash值
    
    除了匿名声明的事件之外，事件hash指纹也是topic之一，也就是说不能通过名字来过滤特定的匿名事件
    
    所有非indexed参数将会作为log数据一部分存储
    
    【注意】indexed 参数将不会被存储它本身，所以你只能查询它，但是不能恢复值的本身
    
8 继承
    一个合约继承了多个合约，在区块链上也只是创建了1个合约，其他合约代码拷贝过来到最终合约上
    抽象合约 
    接口
 
9 库 
  跟合约类似，用EVM的CALLCODE特性来重用代码，
   
10 存储插槽从低字节对齐，即右对齐
   存储插槽32字节
   
   使用小于32字节元素时，合约的gas使用量可能高于使用32字节的元素，因为以太坊虚拟机每次操作32字节，如果元素小于32字节，一方方虚拟机必须使用更多的
   操作才能将其大小缩减到所需的大小
   
   仅当你处理存储插槽中的值的时候，使用缩减大小的参数才有用，处理函数参数和内存中的值时，不会打包
   
   结构和数组中的元素都是顺序存储的
   
   mapping和动态数组大小不可预测，我们用Keccak-256哈希计算来找到具体数值或者数组的起始位置，然后占满整个插槽，所以说mapping和动态数组都是key-value
   随机的位置，不能遍历
   
11 内存中的存储结构  
    solidity保留了4个32字节的slot
    0x00 ~ 0x3f 用于保存方法哈希的临时空间
    0x40 ~ 0x5f 当前已分配的内存大小（空闲内存指针）
    0x60 ~ 0x7f 0值插槽

技巧和窍门：

可以使用 delete 来删除数组中的所有元素。
对 struct 中的元素使用更短的数据类型，并对它们进行排序，将类型一样的变量放在一起，以便将短数据类型组合在一起。这可以降低 gas 消耗，因为多个 SSTORE 操作可能会被合并成一个（SSTORE 消耗 5000 或 20000 的 gas，所以这应该是你想要优化的）。使用 gas 估算器（启用优化器）来检查！
将你的状态变量设置为 public ——编译器会为你自动创建 getters 。
如果你最终需要在函数开始位置检查很多输入条件或者状态变量的值，你可以尝试使用 Function Modifiers 。
如果你的合约有一个 send 函数，但你想要使用内置的 send 函数，你可以使用 address(contractVariable).send(amount)。
使用一个赋值语句就可以初始化 struct：x = MyStruct({a: 1, b: 2});    
    
修饰器：
pure 修饰函数时：不允许修改或访问状态——但目前并不是强制的。
view 修饰函数时：不允许修改状态——但目前不是强制的。
payable 修饰函数时：允许从调用中接收 以太币Ether 。
constant 修饰状态变量时：不允许赋值（除初始化以外），不会占据 存储插槽storage slot 。
constant 修饰函数时：与 view 等价。
anonymous 修饰事件时：不把事件签名作为 topic 存储。
indexed 修饰事件时：将参数作为 topic 存储。   
   
   
   
   
  
